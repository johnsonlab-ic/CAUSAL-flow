// Nextflow configuration for CAUSAL-flow pipeline

// Default work directory
workDir = "${System.getProperty('user.home')}/nextflow_work"

// Singularity settings
singularity.autoMounts = true
singularity.cacheDir = "${System.getProperty('user.home')}/nextflow_singularity"

// Log settings
log {
    file = "${workDir}/nextflow.log"
}

// Manifest information
manifest {
    name = 'CAUSAL-flow'
    author = 'Johnson Lab <your.email@example.com>'
    description = 'Colocalization workflow for identifying shared genetic variants between GWAS and eQTL data'
    version = '1.0.0'
    nextflowVersion = '>=20.10.0'
}

// Pipeline parameters

// Profiles for different execution environments
profiles {
    
    standard {
        process.executor = 'local'
        docker.enabled = true
        process {
            executor = "local"
            container = "ghcr.io/johnsonlab-ic/causal-flow:latest"
        }
    }
    
    offline {
        docker.enabled = true
        
        process {
            executor = "local"
            container = "ghcr.io/johnsonlab-ic/causal-flow:latest"
            memory = 8.GB
        }
    }

    imperial {
        docker.enabled = false
        singularity.enabled = true

        process {
            executor = 'pbspro'
            container = "docker://ghcr.io/johnsonlab-ic/causal-flow:latest"

            // General resource requirements
            errorStrategy = 'retry'
            maxRetries = 5
            maxErrors = '-1'
            queue = { 4 * task.attempt > 8 ? 'v1_small72' : 'v1_small24' }
            cpus = { 1 * task.attempt }
            memory = { 6.GB * task.attempt }
            time = { 4.h * task.attempt }

            // Process-specific resource requirements
            withLabel:process_single {
                cpus = 1
                memory = { 6.GB * task.attempt }
                time = { 4.h * task.attempt }
            }

            withLabel:process_low {
                cpus = { 2 * task.attempt }
                memory = { 12.GB * task.attempt }
                time = { 2.h * task.attempt }
            }

            withLabel:process_medium {
                queue = 'v1_medium72'
                cpus = { 9 * task.attempt }
                memory = { 36.GB * task.attempt }
                time = { 9.h * task.attempt }
            }

            withLabel:process_high {
                queue = 'v1_medium72'
                cpus = { 12 * task.attempt }
                memory = { 72.GB * task.attempt }
                time = { 6.h * task.attempt }
            }

            withLabel:process_long {
                queue = 'v1_medium72'
                cpus = 9
                memory = 96.GB
                time = { 14.h * task.attempt }
            }

            withLabel:process_high_memory {
                queue = { 200 * task.attempt < 921 ? 'v1_medium72' : 'v1_largemem72' }
                cpus = { 10 * task.attempt }
                memory = { 200.GB * task.attempt }
                time = { 4.h * task.attempt }
            }
        }
    }
}

